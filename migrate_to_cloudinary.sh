#!/bin/bash

# Script para migrar im√°genes a Cloudinary
# The Badgers Page - Migraci√≥n de im√°genes

echo "üå©Ô∏è MIGRACI√ìN DE IM√ÅGENES A CLOUDINARY"
echo "====================================="

API_BASE="https://thebadgerspage.onrender.com"
AUTH_HEADER="Authorization: Basic $(echo -n 'admin:password123' | base64)"

echo ""
echo "1Ô∏è‚É£ Verificando configuraci√≥n de Cloudinary..."

# Verificar que el endpoint de migraci√≥n existe
response=$(curl -s -w "%{http_code}" -o /tmp/cloudinary_test.json "$API_BASE/api/test-cloudinary/" \
    -H "$AUTH_HEADER")

if [ "$response" = "200" ]; then
    echo "‚úÖ Cloudinary configurado correctamente"
else
    echo "‚ùå Error en configuraci√≥n de Cloudinary (c√≥digo: $response)"
    echo "   Verifica las variables de entorno CLOUDINARY_*"
fi

echo ""
echo "2Ô∏è‚É£ Iniciando migraci√≥n de im√°genes existentes..."

# Intentar migrar im√°genes existentes
response=$(curl -s -w "%{http_code}" -o /tmp/migration_result.json "$API_BASE/api/migrate-existing-images/" \
    -H "$AUTH_HEADER" \
    -H "Content-Type: application/json" \
    -X POST)

if [ "$response" = "200" ]; then
    echo "‚úÖ Migraci√≥n iniciada correctamente"
    if command -v jq >/dev/null 2>&1; then
        echo "   - Resultado: $(jq -r .message /tmp/migration_result.json 2>/dev/null || echo 'Ver detalles en los logs')"
    fi
else
    echo "‚ùå Error en migraci√≥n (c√≥digo: $response)"
    echo "   - Revisa los logs del servidor"
fi

echo ""
echo "3Ô∏è‚É£ Limpiando im√°genes de Unsplash..."

# Limpiar im√°genes de Unsplash (que son de ejemplo)
response=$(curl -s -w "%{http_code}" -o /tmp/cleanup_result.json "$API_BASE/api/cleanup-unsplash/" \
    -H "$AUTH_HEADER" \
    -X POST)

if [ "$response" = "200" ]; then
    echo "‚úÖ Limpieza completada"
    if command -v jq >/dev/null 2>&1; then
        echo "   - $(jq -r .message /tmp/cleanup_result.json 2>/dev/null || echo 'Ver logs para detalles')"
    fi
else
    echo "‚ö†Ô∏è Limpieza no completada (c√≥digo: $response)"
fi

echo ""
echo "4Ô∏è‚É£ Verificando estado post-migraci√≥n..."

# Verificar las primeras im√°genes para ver si tienen URLs de Cloudinary
response=$(curl -s -w "%{http_code}" -o /tmp/galeria_check.json "$API_BASE/api/galeria/")

if [ "$response" = "200" ]; then
    echo "‚úÖ Galer√≠a accesible"
    
    # Verificar URLs
    if command -v jq >/dev/null 2>&1; then
        cloudinary_count=$(jq '[.[] | select(.url | contains("cloudinary"))] | length' /tmp/galeria_check.json 2>/dev/null || echo "0")
        total_count=$(jq '. | length' /tmp/galeria_check.json 2>/dev/null || echo "?")
        
        echo "   - Total de im√°genes: $total_count"
        echo "   - Im√°genes en Cloudinary: $cloudinary_count"
        
        if [ "$cloudinary_count" -gt "0" ]; then
            echo "   ‚úÖ Migraci√≥n exitosa - Im√°genes ahora en Cloudinary"
        else
            echo "   ‚ö†Ô∏è Las im√°genes a√∫n no est√°n en Cloudinary"
        fi
    fi
else
    echo "‚ùå Error accediendo a galer√≠a (c√≥digo: $response)"
fi

echo ""
echo "üéØ PASOS SIGUIENTES:"
echo "==================="
echo "1. Verifica en la galer√≠a: https://thebadgerspage.onrender.com/galeria"
echo "2. Las im√°genes deber√≠an cargarse desde res.cloudinary.com"
echo "3. Si ves URLs locales, espera unos minutos para la migraci√≥n"
echo "4. Sube nuevas im√°genes para probar que van directamente a Cloudinary"

echo ""
echo "üìã CONFIGURACI√ìN CLOUDINARY REQUERIDA:"
echo "- CLOUDINARY_CLOUD_NAME=tu_cloud_name"
echo "- CLOUDINARY_API_KEY=tu_api_key"  
echo "- CLOUDINARY_API_SECRET=tu_api_secret"

# Limpiar archivos temporales
rm -f /tmp/cloudinary_test.json /tmp/migration_result.json /tmp/cleanup_result.json /tmp/galeria_check.json

echo ""
echo "Estado: ‚úÖ Script completado"
echo "Revisa los resultados y verifica la galer√≠a web"
